[general]
accounts = B_Chreekat, Personal, Snowdrift, Formaltech
# google isn't snappy with imap
socktimeout = 30
pythonfile=~/.offlineimap/helper.py
maxsyncaccounts=1
ui=basic

[mbnames]
enabled = yes
filename = ~/.mutt/mailboxes.rc
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"
sep = " "
footer = "\n"

[Account B_Chreekat]
localrepository = B_ChreekatLocal
remoterepository = B_ChreekatRemote
status_backend = sqlite

[Account Personal]
localrepository = PersonalLocal
remoterepository = PersonalRemote
status_backend = sqlite

[Account Snowdrift]
localrepository = SnowdriftLocal
remoterepository = SnowdriftRemote
status_backend = sqlite

[Account Formaltech]
localrepository = FormaltechLocal
remoterepository = FormaltechRemote
status_backend = sqlite

[Repository B_ChreekatLocal]
type = Maildir
localfolders = ~/Mail/B_Chreekat
nametrans = lambda folder: { 'starred': '[Gmail]/Starred'
                           }.get(folder, folder)

[Repository B_ChreekatRemote]
type = Gmail
maxconnections = 3
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remoteuser = b@chreekat.net
# To set the password, do:
# >>> import keyring
# >>> keyring.set_password("gmail", "username", "password")
remotepasseval = get_password("google.com", "b@chreekat.net")
folderfilter = lambda f: f in ['[Gmail]/Starred'
                              ,'recent'
                              ,'@haskell'
                              ,'@upcoming'
                              ,'@waiting_for'
                              ,'INBOX'
                              ]
nametrans = lambda folder: {'[Gmail]/Starred':   'starred'
                           }.get(folder, folder)

[Repository PersonalLocal]
type = Maildir
localfolders = ~/Mail/Personal
nametrans = lambda folder: { 'starred': '[Gmail]/Starred'
                           }.get(folder, folder)

[Repository PersonalRemote]
type = Gmail
maxconnections = 3
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remoteuser = bryan.richter@gmail.com
# To set the password, do:
# >>> import keyring
# >>> keyring.set_password("gmail", "username", "password")
remotepasseval = get_password("gmail", "personal")
folderfilter = lambda f: f in ['[Gmail]/Starred'
                              ,'recent'
                              ,'@upcoming'
                              ,'@waiting_for'
                              ,'INBOX'
                              ]
nametrans = lambda folder: {'[Gmail]/Starred':   'starred'
                           }.get(folder, folder)

[Repository SnowdriftLocal]
type = Maildir
localfolders= ~/Mail/Snowdrift

[Repository SnowdriftRemote]
type = IMAP
ssl = yes
maxconnections = 3
remotehost = mx1.snowdrift.coop
remoteuser = bryan@snowdrift.coop
remotepasseval = str(get_password("snowdrift", "me"))
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
folderfilter = lambda f: f in ['INBOX', '@action']

[Repository FormaltechLocal]
type = Maildir
localfolders = ~/Mail/Formaltech
nametrans = lambda folder: { 'starred': '[Gmail]/Starred'
                           }.get(folder, folder)

[Repository FormaltechRemote]
type = Gmail
maxconnections = 3
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remoteuser = bryan.richter@formal.tech
# To set the password, do:
# >>> import keyring
# >>> keyring.set_password("gmail", "username", "password")
remotepasseval = get_password("gmail", "formaltech")
folderfilter = lambda f: f in ['[Gmail]/Starred'
                              ,'recent'
                              ,'@upcoming'
                              ,'@waiting_for'
                              ,'INBOX'
                              ]
nametrans = lambda folder: {'[Gmail]/Starred':   'starred'
                           }.get(folder, folder)
